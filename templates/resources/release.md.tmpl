---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | trimspace }}

A release is an instance of a Tanka Package running in a Kubernetes cluster.

The `tanka_release` resource describes the desired status of the Tanka Package.

Configuration is passed in either `config` or `config_override`.

This structure is born out of a need to be able to set default configuration at both the jsonnet and terraform level along with the option to let environments override config in the ci/cd pipeline.

Both config vars, together with `api_server` and `namespace` are passed to tanka as tla-code vars.

This structure assumes that the tanka package is configured with [inline environments](https://tanka.dev/inline-environments) in order to dynamically set the `api_server` and `namespace`. A minimal setup for `main.jsonnet` using this provider could look like this:

```jsonnet
function(apiServer, namespace, config={}, config_override={}) {

  local default = {},
  local override = std.mergePatch(config, config_override),
  local conf = std.mergePatch(default, override),

  apiVersion: 'tanka.dev/v1alpha1',
  kind: 'Environment',
  metadata: {
    name: 'default',
  },
  spec: {
    namespace: namespace,
    apiServer: apiServer,
    injectLabels: true,
  },

  data: {
    // your kubernetes resource definitions here
  },
}
```

Using the std.mergePatch() function from the jsonnet standard library ensures that nested json objects are deep merged and not overwritten if identical keys are found.

Note the camelCase in `apiServer` in the jsonnet context.

Both `config` and `config_override` are json objects given either directly in the resource definition by parsing through `jsonencode()` or by loading a file from either a local (by prefixing with `file://`) or remote (by prefixing with `http://` or `https://`) source. The remote sources must be publicly accessible, at this time there is no mechanism for providing authentication credentials to the remote server.

{{ if .HasExample -}}
## Example Usage

{{tffile .ExampleFile }}
{{- end }}

{{ .SchemaMarkdown | trimspace }}
{{- if .HasImport }}

## Import

Import is supported using the following syntax:

{{codefile "shell" .ImportFile }}
{{- end }}
